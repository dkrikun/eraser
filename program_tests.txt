
Inc, 1 manual SynchWorker, 1 Cell w/ data & id fields being r/w, for 5 iterations - no alarms observed as expected - OK.
Inc, 2 manual SynchWorker, 1 Cell w/ data & id fields being r/w, for 5 iterations - observed alarms (incorrect), debug prints lock comparison= false.
Actually this IS correct because it is really not the same lock!
Same as before, but now fixed to lock on cell mutex - no alarms, fsm moves to shared_modified state as expected - OK.
Same for 50 iterations - OK.
Inc, 4 manual SyncWorkers, 10 iterations - no alarms, shared_modified - all OK.
Same but main thread prints the result in the end (i.e unlocked access to the same variables - data race alarm expected) - no alarm..
        but it is exactly according to the eraser logic! Main reads vars first, so it is the main who initializes.

Inc, 1 manual Worker. OK
Inc, 2 manual Worker(only id field written). Expected alarm - got 19 alarms, as expected for 2 threads * 10 writes each ( one is initialization).

Inc, 1 method synch worker. This guy has lots of locks taken - mistakenly none of them common to any of the threads. 
 So expected alarms here. No alarms?? That is weird..
 I observe 1 of 3 lock comparisons evaluates to true, which means, it thinks there is a common lock in this story. Lets see which of them.
 I suspect syncronized method is faulty.. yep. Wait, .. does synchronized method locks on this or on class? On this for non-statics. And this is
 not static. So its incorrect here. Maybe instrumentation is incorrect?
 Ouch that craches sometimes. Luckily, crashes rare, but the result of lock compare is non-deterministic. The crash was about the same old 
 'using JNIEnv from wrong thread'. Ouch, runmany crashes oftentimes.
 Don't get how is that possible.. jni env is always reloaded prior to its use..
 Some wild crazy context switch on inspite of monitor enter/exit?


Inc, 2 threads, 3 iter. Added synched method on Cell which writes to its field. Expected no alarms. But it DOES alarms. No monitor enter/exit
observed in the output. Well, this is a bug, because synch. methods need to be instrumented not in thread classes but rather in classes who has their
fields updated (in their own synch methods). Fixed.



